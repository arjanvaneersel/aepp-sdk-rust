/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OracleRespondTx {
  #[serde(rename = "query_id")]
  query_id: ::models::EncodedHash,
  #[serde(rename = "response")]
  response: String,
  #[serde(rename = "response_ttl")]
  response_ttl: ::models::RelativeTtl,
  #[serde(rename = "fee")]
  fee: i64,
  #[serde(rename = "ttl")]
  ttl: Option<i64>,
  #[serde(rename = "oracle_id")]
  oracle_id: ::models::EncodedHash,
  /// Oracle nonce
  #[serde(rename = "nonce")]
  nonce: Option<i64>
}

impl OracleRespondTx {
  pub fn new(query_id: ::models::EncodedHash, response: String, response_ttl: ::models::RelativeTtl, fee: i64, oracle_id: ::models::EncodedHash) -> OracleRespondTx {
    OracleRespondTx {
      query_id: query_id,
      response: response,
      response_ttl: response_ttl,
      fee: fee,
      ttl: None,
      oracle_id: oracle_id,
      nonce: None
    }
  }

  pub fn set_query_id(&mut self, query_id: ::models::EncodedHash) {
    self.query_id = query_id;
  }

  pub fn with_query_id(mut self, query_id: ::models::EncodedHash) -> OracleRespondTx {
    self.query_id = query_id;
    self
  }

  pub fn query_id(&self) -> &::models::EncodedHash {
    &self.query_id
  }


  pub fn set_response(&mut self, response: String) {
    self.response = response;
  }

  pub fn with_response(mut self, response: String) -> OracleRespondTx {
    self.response = response;
    self
  }

  pub fn response(&self) -> &String {
    &self.response
  }


  pub fn set_response_ttl(&mut self, response_ttl: ::models::RelativeTtl) {
    self.response_ttl = response_ttl;
  }

  pub fn with_response_ttl(mut self, response_ttl: ::models::RelativeTtl) -> OracleRespondTx {
    self.response_ttl = response_ttl;
    self
  }

  pub fn response_ttl(&self) -> &::models::RelativeTtl {
    &self.response_ttl
  }


  pub fn set_fee(&mut self, fee: i64) {
    self.fee = fee;
  }

  pub fn with_fee(mut self, fee: i64) -> OracleRespondTx {
    self.fee = fee;
    self
  }

  pub fn fee(&self) -> &i64 {
    &self.fee
  }


  pub fn set_ttl(&mut self, ttl: i64) {
    self.ttl = Some(ttl);
  }

  pub fn with_ttl(mut self, ttl: i64) -> OracleRespondTx {
    self.ttl = Some(ttl);
    self
  }

  pub fn ttl(&self) -> Option<&i64> {
    self.ttl.as_ref()
  }

  pub fn reset_ttl(&mut self) {
    self.ttl = None;
  }

  pub fn set_oracle_id(&mut self, oracle_id: ::models::EncodedHash) {
    self.oracle_id = oracle_id;
  }

  pub fn with_oracle_id(mut self, oracle_id: ::models::EncodedHash) -> OracleRespondTx {
    self.oracle_id = oracle_id;
    self
  }

  pub fn oracle_id(&self) -> &::models::EncodedHash {
    &self.oracle_id
  }


  pub fn set_nonce(&mut self, nonce: i64) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: i64) -> OracleRespondTx {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&i64> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

}



