/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct KeyBlock {
  #[serde(rename = "hash")]
  hash: ::models::EncodedHash,
  #[serde(rename = "height")]
  height: i64,
  #[serde(rename = "prev_hash")]
  prev_hash: ::models::EncodedHash,
  #[serde(rename = "prev_key_hash")]
  prev_key_hash: ::models::EncodedHash,
  #[serde(rename = "state_hash")]
  state_hash: ::models::EncodedHash,
  #[serde(rename = "miner")]
  miner: ::models::EncodedHash,
  #[serde(rename = "beneficiary")]
  beneficiary: ::models::EncodedHash,
  #[serde(rename = "target")]
  target: i64,
  #[serde(rename = "pow")]
  pow: Option<::models::Pow>,
  #[serde(rename = "nonce")]
  nonce: Option<i64>,
  #[serde(rename = "time")]
  time: i64,
  #[serde(rename = "version")]
  version: i64
}

impl KeyBlock {
  pub fn new(hash: ::models::EncodedHash, height: i64, prev_hash: ::models::EncodedHash, prev_key_hash: ::models::EncodedHash, state_hash: ::models::EncodedHash, miner: ::models::EncodedHash, beneficiary: ::models::EncodedHash, target: i64, time: i64, version: i64) -> KeyBlock {
    KeyBlock {
      hash: hash,
      height: height,
      prev_hash: prev_hash,
      prev_key_hash: prev_key_hash,
      state_hash: state_hash,
      miner: miner,
      beneficiary: beneficiary,
      target: target,
      pow: None,
      nonce: None,
      time: time,
      version: version
    }
  }

  pub fn set_hash(&mut self, hash: ::models::EncodedHash) {
    self.hash = hash;
  }

  pub fn with_hash(mut self, hash: ::models::EncodedHash) -> KeyBlock {
    self.hash = hash;
    self
  }

  pub fn hash(&self) -> &::models::EncodedHash {
    &self.hash
  }


  pub fn set_height(&mut self, height: i64) {
    self.height = height;
  }

  pub fn with_height(mut self, height: i64) -> KeyBlock {
    self.height = height;
    self
  }

  pub fn height(&self) -> &i64 {
    &self.height
  }


  pub fn set_prev_hash(&mut self, prev_hash: ::models::EncodedHash) {
    self.prev_hash = prev_hash;
  }

  pub fn with_prev_hash(mut self, prev_hash: ::models::EncodedHash) -> KeyBlock {
    self.prev_hash = prev_hash;
    self
  }

  pub fn prev_hash(&self) -> &::models::EncodedHash {
    &self.prev_hash
  }


  pub fn set_prev_key_hash(&mut self, prev_key_hash: ::models::EncodedHash) {
    self.prev_key_hash = prev_key_hash;
  }

  pub fn with_prev_key_hash(mut self, prev_key_hash: ::models::EncodedHash) -> KeyBlock {
    self.prev_key_hash = prev_key_hash;
    self
  }

  pub fn prev_key_hash(&self) -> &::models::EncodedHash {
    &self.prev_key_hash
  }


  pub fn set_state_hash(&mut self, state_hash: ::models::EncodedHash) {
    self.state_hash = state_hash;
  }

  pub fn with_state_hash(mut self, state_hash: ::models::EncodedHash) -> KeyBlock {
    self.state_hash = state_hash;
    self
  }

  pub fn state_hash(&self) -> &::models::EncodedHash {
    &self.state_hash
  }


  pub fn set_miner(&mut self, miner: ::models::EncodedHash) {
    self.miner = miner;
  }

  pub fn with_miner(mut self, miner: ::models::EncodedHash) -> KeyBlock {
    self.miner = miner;
    self
  }

  pub fn miner(&self) -> &::models::EncodedHash {
    &self.miner
  }


  pub fn set_beneficiary(&mut self, beneficiary: ::models::EncodedHash) {
    self.beneficiary = beneficiary;
  }

  pub fn with_beneficiary(mut self, beneficiary: ::models::EncodedHash) -> KeyBlock {
    self.beneficiary = beneficiary;
    self
  }

  pub fn beneficiary(&self) -> &::models::EncodedHash {
    &self.beneficiary
  }


  pub fn set_target(&mut self, target: i64) {
    self.target = target;
  }

  pub fn with_target(mut self, target: i64) -> KeyBlock {
    self.target = target;
    self
  }

  pub fn target(&self) -> &i64 {
    &self.target
  }


  pub fn set_pow(&mut self, pow: ::models::Pow) {
    self.pow = Some(pow);
  }

  pub fn with_pow(mut self, pow: ::models::Pow) -> KeyBlock {
    self.pow = Some(pow);
    self
  }

  pub fn pow(&self) -> Option<&::models::Pow> {
    self.pow.as_ref()
  }

  pub fn reset_pow(&mut self) {
    self.pow = None;
  }

  pub fn set_nonce(&mut self, nonce: i64) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: i64) -> KeyBlock {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&i64> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

  pub fn set_time(&mut self, time: i64) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i64) -> KeyBlock {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i64 {
    &self.time
  }


  pub fn set_version(&mut self, version: i64) {
    self.version = version;
  }

  pub fn with_version(mut self, version: i64) -> KeyBlock {
    self.version = version;
    self
  }

  pub fn version(&self) -> &i64 {
    &self.version
  }


}



