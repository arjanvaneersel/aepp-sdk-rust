/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct KeyBlockOrMicroBlockHeader {
  #[serde(rename = "key_block")]
  key_block: Option<::models::KeyBlock>,
  #[serde(rename = "micro_block")]
  micro_block: Option<::models::MicroBlockHeader>
}

impl KeyBlockOrMicroBlockHeader {
  pub fn new() -> KeyBlockOrMicroBlockHeader {
    KeyBlockOrMicroBlockHeader {
      key_block: None,
      micro_block: None
    }
  }

  pub fn set_key_block(&mut self, key_block: ::models::KeyBlock) {
    self.key_block = Some(key_block);
  }

  pub fn with_key_block(mut self, key_block: ::models::KeyBlock) -> KeyBlockOrMicroBlockHeader {
    self.key_block = Some(key_block);
    self
  }

  pub fn key_block(&self) -> Option<&::models::KeyBlock> {
    self.key_block.as_ref()
  }

  pub fn reset_key_block(&mut self) {
    self.key_block = None;
  }

  pub fn set_micro_block(&mut self, micro_block: ::models::MicroBlockHeader) {
    self.micro_block = Some(micro_block);
  }

  pub fn with_micro_block(mut self, micro_block: ::models::MicroBlockHeader) -> KeyBlockOrMicroBlockHeader {
    self.micro_block = Some(micro_block);
    self
  }

  pub fn micro_block(&self) -> Option<&::models::MicroBlockHeader> {
    self.micro_block.as_ref()
  }

  pub fn reset_micro_block(&mut self) {
    self.micro_block = None;
  }

}



