/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OracleRegisterTx {
  #[serde(rename = "query_format")]
  query_format: String,
  #[serde(rename = "response_format")]
  response_format: String,
  #[serde(rename = "query_fee")]
  query_fee: i64,
  #[serde(rename = "oracle_ttl")]
  oracle_ttl: ::models::Ttl,
  #[serde(rename = "account_id")]
  account_id: ::models::EncodedHash,
  #[serde(rename = "nonce")]
  nonce: Option<i64>,
  #[serde(rename = "fee")]
  fee: i64,
  #[serde(rename = "ttl")]
  ttl: Option<i64>,
  #[serde(rename = "vm_version")]
  vm_version: Option<i64>
}

impl OracleRegisterTx {
  pub fn new(query_format: String, response_format: String, query_fee: i64, oracle_ttl: ::models::Ttl, account_id: ::models::EncodedHash, fee: i64) -> OracleRegisterTx {
    OracleRegisterTx {
      query_format: query_format,
      response_format: response_format,
      query_fee: query_fee,
      oracle_ttl: oracle_ttl,
      account_id: account_id,
      nonce: None,
      fee: fee,
      ttl: None,
      vm_version: None
    }
  }

  pub fn set_query_format(&mut self, query_format: String) {
    self.query_format = query_format;
  }

  pub fn with_query_format(mut self, query_format: String) -> OracleRegisterTx {
    self.query_format = query_format;
    self
  }

  pub fn query_format(&self) -> &String {
    &self.query_format
  }


  pub fn set_response_format(&mut self, response_format: String) {
    self.response_format = response_format;
  }

  pub fn with_response_format(mut self, response_format: String) -> OracleRegisterTx {
    self.response_format = response_format;
    self
  }

  pub fn response_format(&self) -> &String {
    &self.response_format
  }


  pub fn set_query_fee(&mut self, query_fee: i64) {
    self.query_fee = query_fee;
  }

  pub fn with_query_fee(mut self, query_fee: i64) -> OracleRegisterTx {
    self.query_fee = query_fee;
    self
  }

  pub fn query_fee(&self) -> &i64 {
    &self.query_fee
  }


  pub fn set_oracle_ttl(&mut self, oracle_ttl: ::models::Ttl) {
    self.oracle_ttl = oracle_ttl;
  }

  pub fn with_oracle_ttl(mut self, oracle_ttl: ::models::Ttl) -> OracleRegisterTx {
    self.oracle_ttl = oracle_ttl;
    self
  }

  pub fn oracle_ttl(&self) -> &::models::Ttl {
    &self.oracle_ttl
  }


  pub fn set_account_id(&mut self, account_id: ::models::EncodedHash) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: ::models::EncodedHash) -> OracleRegisterTx {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &::models::EncodedHash {
    &self.account_id
  }


  pub fn set_nonce(&mut self, nonce: i64) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: i64) -> OracleRegisterTx {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&i64> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

  pub fn set_fee(&mut self, fee: i64) {
    self.fee = fee;
  }

  pub fn with_fee(mut self, fee: i64) -> OracleRegisterTx {
    self.fee = fee;
    self
  }

  pub fn fee(&self) -> &i64 {
    &self.fee
  }


  pub fn set_ttl(&mut self, ttl: i64) {
    self.ttl = Some(ttl);
  }

  pub fn with_ttl(mut self, ttl: i64) -> OracleRegisterTx {
    self.ttl = Some(ttl);
    self
  }

  pub fn ttl(&self) -> Option<&i64> {
    self.ttl.as_ref()
  }

  pub fn reset_ttl(&mut self) {
    self.ttl = None;
  }

  pub fn set_vm_version(&mut self, vm_version: i64) {
    self.vm_version = Some(vm_version);
  }

  pub fn with_vm_version(mut self, vm_version: i64) -> OracleRegisterTx {
    self.vm_version = Some(vm_version);
    self
  }

  pub fn vm_version(&self) -> Option<&i64> {
    self.vm_version.as_ref()
  }

  pub fn reset_vm_version(&mut self) {
    self.vm_version = None;
  }

}



