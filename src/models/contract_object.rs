/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContractObject {
  #[serde(rename = "id")]
  id: ::models::EncodedHash,
  #[serde(rename = "owner_id")]
  owner_id: ::models::EncodedHash,
  #[serde(rename = "vm_version")]
  vm_version: i32,
  #[serde(rename = "log")]
  log: String,
  #[serde(rename = "active")]
  active: bool,
  #[serde(rename = "referrer_ids")]
  referrer_ids: Vec<::models::EncodedHash>,
  #[serde(rename = "deposit")]
  deposit: i32
}

impl ContractObject {
  pub fn new(id: ::models::EncodedHash, owner_id: ::models::EncodedHash, vm_version: i32, log: String, active: bool, referrer_ids: Vec<::models::EncodedHash>, deposit: i32) -> ContractObject {
    ContractObject {
      id: id,
      owner_id: owner_id,
      vm_version: vm_version,
      log: log,
      active: active,
      referrer_ids: referrer_ids,
      deposit: deposit
    }
  }

  pub fn set_id(&mut self, id: ::models::EncodedHash) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::EncodedHash) -> ContractObject {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::EncodedHash {
    &self.id
  }


  pub fn set_owner_id(&mut self, owner_id: ::models::EncodedHash) {
    self.owner_id = owner_id;
  }

  pub fn with_owner_id(mut self, owner_id: ::models::EncodedHash) -> ContractObject {
    self.owner_id = owner_id;
    self
  }

  pub fn owner_id(&self) -> &::models::EncodedHash {
    &self.owner_id
  }


  pub fn set_vm_version(&mut self, vm_version: i32) {
    self.vm_version = vm_version;
  }

  pub fn with_vm_version(mut self, vm_version: i32) -> ContractObject {
    self.vm_version = vm_version;
    self
  }

  pub fn vm_version(&self) -> &i32 {
    &self.vm_version
  }


  pub fn set_log(&mut self, log: String) {
    self.log = log;
  }

  pub fn with_log(mut self, log: String) -> ContractObject {
    self.log = log;
    self
  }

  pub fn log(&self) -> &String {
    &self.log
  }


  pub fn set_active(&mut self, active: bool) {
    self.active = active;
  }

  pub fn with_active(mut self, active: bool) -> ContractObject {
    self.active = active;
    self
  }

  pub fn active(&self) -> &bool {
    &self.active
  }


  pub fn set_referrer_ids(&mut self, referrer_ids: Vec<::models::EncodedHash>) {
    self.referrer_ids = referrer_ids;
  }

  pub fn with_referrer_ids(mut self, referrer_ids: Vec<::models::EncodedHash>) -> ContractObject {
    self.referrer_ids = referrer_ids;
    self
  }

  pub fn referrer_ids(&self) -> &Vec<::models::EncodedHash> {
    &self.referrer_ids
  }


  pub fn set_deposit(&mut self, deposit: i32) {
    self.deposit = deposit;
  }

  pub fn with_deposit(mut self, deposit: i32) -> ContractObject {
    self.deposit = deposit;
    self
  }

  pub fn deposit(&self) -> &i32 {
    &self.deposit
  }


}



