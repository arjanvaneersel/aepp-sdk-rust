/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Generation {
  #[serde(rename = "key_block")]
  key_block: ::models::KeyBlock,
  #[serde(rename = "micro_blocks")]
  micro_blocks: Vec<::models::EncodedHash>
}

impl Generation {
  pub fn new(key_block: ::models::KeyBlock, micro_blocks: Vec<::models::EncodedHash>) -> Generation {
    Generation {
      key_block: key_block,
      micro_blocks: micro_blocks
    }
  }

  pub fn set_key_block(&mut self, key_block: ::models::KeyBlock) {
    self.key_block = key_block;
  }

  pub fn with_key_block(mut self, key_block: ::models::KeyBlock) -> Generation {
    self.key_block = key_block;
    self
  }

  pub fn key_block(&self) -> &::models::KeyBlock {
    &self.key_block
  }


  pub fn set_micro_blocks(&mut self, micro_blocks: Vec<::models::EncodedHash>) {
    self.micro_blocks = micro_blocks;
  }

  pub fn with_micro_blocks(mut self, micro_blocks: Vec<::models::EncodedHash>) -> Generation {
    self.micro_blocks = micro_blocks;
    self
  }

  pub fn micro_blocks(&self) -> &Vec<::models::EncodedHash> {
    &self.micro_blocks
  }


}



