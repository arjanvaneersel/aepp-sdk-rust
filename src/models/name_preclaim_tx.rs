/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamePreclaimTx {
  #[serde(rename = "commitment_id")]
  commitment_id: ::models::EncodedHash,
  #[serde(rename = "fee")]
  fee: i64,
  #[serde(rename = "ttl")]
  ttl: Option<i64>,
  #[serde(rename = "account_id")]
  account_id: ::models::EncodedHash,
  #[serde(rename = "nonce")]
  nonce: Option<i64>
}

impl NamePreclaimTx {
  pub fn new(commitment_id: ::models::EncodedHash, fee: i64, account_id: ::models::EncodedHash) -> NamePreclaimTx {
    NamePreclaimTx {
      commitment_id: commitment_id,
      fee: fee,
      ttl: None,
      account_id: account_id,
      nonce: None
    }
  }

  pub fn set_commitment_id(&mut self, commitment_id: ::models::EncodedHash) {
    self.commitment_id = commitment_id;
  }

  pub fn with_commitment_id(mut self, commitment_id: ::models::EncodedHash) -> NamePreclaimTx {
    self.commitment_id = commitment_id;
    self
  }

  pub fn commitment_id(&self) -> &::models::EncodedHash {
    &self.commitment_id
  }


  pub fn set_fee(&mut self, fee: i64) {
    self.fee = fee;
  }

  pub fn with_fee(mut self, fee: i64) -> NamePreclaimTx {
    self.fee = fee;
    self
  }

  pub fn fee(&self) -> &i64 {
    &self.fee
  }


  pub fn set_ttl(&mut self, ttl: i64) {
    self.ttl = Some(ttl);
  }

  pub fn with_ttl(mut self, ttl: i64) -> NamePreclaimTx {
    self.ttl = Some(ttl);
    self
  }

  pub fn ttl(&self) -> Option<&i64> {
    self.ttl.as_ref()
  }

  pub fn reset_ttl(&mut self) {
    self.ttl = None;
  }

  pub fn set_account_id(&mut self, account_id: ::models::EncodedHash) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: ::models::EncodedHash) -> NamePreclaimTx {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &::models::EncodedHash {
    &self.account_id
  }


  pub fn set_nonce(&mut self, nonce: i64) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: i64) -> NamePreclaimTx {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&i64> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

}



