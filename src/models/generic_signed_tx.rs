/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GenericSignedTx {
  #[serde(rename = "tx")]
  tx: ::models::GenericTx,
  #[serde(rename = "block_height")]
  block_height: i32,
  /// Value \"none\" means no block in the chain includes the transaction
  #[serde(rename = "block_hash")]
  block_hash: ::models::EncodedHash,
  #[serde(rename = "hash")]
  hash: ::models::EncodedHash,
  #[serde(rename = "signatures")]
  signatures: Vec<String>
}

impl GenericSignedTx {
  pub fn new(tx: ::models::GenericTx, block_height: i32, block_hash: ::models::EncodedHash, hash: ::models::EncodedHash, signatures: Vec<String>) -> GenericSignedTx {
    GenericSignedTx {
      tx: tx,
      block_height: block_height,
      block_hash: block_hash,
      hash: hash,
      signatures: signatures
    }
  }

  pub fn set_tx(&mut self, tx: ::models::GenericTx) {
    self.tx = tx;
  }

  pub fn with_tx(mut self, tx: ::models::GenericTx) -> GenericSignedTx {
    self.tx = tx;
    self
  }

  pub fn tx(&self) -> &::models::GenericTx {
    &self.tx
  }


  pub fn set_block_height(&mut self, block_height: i32) {
    self.block_height = block_height;
  }

  pub fn with_block_height(mut self, block_height: i32) -> GenericSignedTx {
    self.block_height = block_height;
    self
  }

  pub fn block_height(&self) -> &i32 {
    &self.block_height
  }


  pub fn set_block_hash(&mut self, block_hash: ::models::EncodedHash) {
    self.block_hash = block_hash;
  }

  pub fn with_block_hash(mut self, block_hash: ::models::EncodedHash) -> GenericSignedTx {
    self.block_hash = block_hash;
    self
  }

  pub fn block_hash(&self) -> &::models::EncodedHash {
    &self.block_hash
  }


  pub fn set_hash(&mut self, hash: ::models::EncodedHash) {
    self.hash = hash;
  }

  pub fn with_hash(mut self, hash: ::models::EncodedHash) -> GenericSignedTx {
    self.hash = hash;
    self
  }

  pub fn hash(&self) -> &::models::EncodedHash {
    &self.hash
  }


  pub fn set_signatures(&mut self, signatures: Vec<String>) {
    self.signatures = signatures;
  }

  pub fn with_signatures(mut self, signatures: Vec<String>) -> GenericSignedTx {
    self.signatures = signatures;
    self
  }

  pub fn signatures(&self) -> &Vec<String> {
    &self.signatures
  }


}



