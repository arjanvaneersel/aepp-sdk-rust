/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MicroBlockHeader {
  #[serde(rename = "hash")]
  hash: ::models::EncodedHash,
  #[serde(rename = "height")]
  height: i64,
  /// \"no_fraud\" | base58c encoded Proof of Fraud hash
  #[serde(rename = "pof_hash")]
  pof_hash: String,
  #[serde(rename = "prev_hash")]
  prev_hash: ::models::EncodedHash,
  #[serde(rename = "prev_key_hash")]
  prev_key_hash: ::models::EncodedHash,
  #[serde(rename = "state_hash")]
  state_hash: ::models::EncodedHash,
  #[serde(rename = "txs_hash")]
  txs_hash: ::models::EncodedHash,
  #[serde(rename = "signature")]
  signature: ::models::EncodedHash,
  #[serde(rename = "time")]
  time: i64,
  #[serde(rename = "version")]
  version: i64
}

impl MicroBlockHeader {
  pub fn new(hash: ::models::EncodedHash, height: i64, pof_hash: String, prev_hash: ::models::EncodedHash, prev_key_hash: ::models::EncodedHash, state_hash: ::models::EncodedHash, txs_hash: ::models::EncodedHash, signature: ::models::EncodedHash, time: i64, version: i64) -> MicroBlockHeader {
    MicroBlockHeader {
      hash: hash,
      height: height,
      pof_hash: pof_hash,
      prev_hash: prev_hash,
      prev_key_hash: prev_key_hash,
      state_hash: state_hash,
      txs_hash: txs_hash,
      signature: signature,
      time: time,
      version: version
    }
  }

  pub fn set_hash(&mut self, hash: ::models::EncodedHash) {
    self.hash = hash;
  }

  pub fn with_hash(mut self, hash: ::models::EncodedHash) -> MicroBlockHeader {
    self.hash = hash;
    self
  }

  pub fn hash(&self) -> &::models::EncodedHash {
    &self.hash
  }


  pub fn set_height(&mut self, height: i64) {
    self.height = height;
  }

  pub fn with_height(mut self, height: i64) -> MicroBlockHeader {
    self.height = height;
    self
  }

  pub fn height(&self) -> &i64 {
    &self.height
  }


  pub fn set_pof_hash(&mut self, pof_hash: String) {
    self.pof_hash = pof_hash;
  }

  pub fn with_pof_hash(mut self, pof_hash: String) -> MicroBlockHeader {
    self.pof_hash = pof_hash;
    self
  }

  pub fn pof_hash(&self) -> &String {
    &self.pof_hash
  }


  pub fn set_prev_hash(&mut self, prev_hash: ::models::EncodedHash) {
    self.prev_hash = prev_hash;
  }

  pub fn with_prev_hash(mut self, prev_hash: ::models::EncodedHash) -> MicroBlockHeader {
    self.prev_hash = prev_hash;
    self
  }

  pub fn prev_hash(&self) -> &::models::EncodedHash {
    &self.prev_hash
  }


  pub fn set_prev_key_hash(&mut self, prev_key_hash: ::models::EncodedHash) {
    self.prev_key_hash = prev_key_hash;
  }

  pub fn with_prev_key_hash(mut self, prev_key_hash: ::models::EncodedHash) -> MicroBlockHeader {
    self.prev_key_hash = prev_key_hash;
    self
  }

  pub fn prev_key_hash(&self) -> &::models::EncodedHash {
    &self.prev_key_hash
  }


  pub fn set_state_hash(&mut self, state_hash: ::models::EncodedHash) {
    self.state_hash = state_hash;
  }

  pub fn with_state_hash(mut self, state_hash: ::models::EncodedHash) -> MicroBlockHeader {
    self.state_hash = state_hash;
    self
  }

  pub fn state_hash(&self) -> &::models::EncodedHash {
    &self.state_hash
  }


  pub fn set_txs_hash(&mut self, txs_hash: ::models::EncodedHash) {
    self.txs_hash = txs_hash;
  }

  pub fn with_txs_hash(mut self, txs_hash: ::models::EncodedHash) -> MicroBlockHeader {
    self.txs_hash = txs_hash;
    self
  }

  pub fn txs_hash(&self) -> &::models::EncodedHash {
    &self.txs_hash
  }


  pub fn set_signature(&mut self, signature: ::models::EncodedHash) {
    self.signature = signature;
  }

  pub fn with_signature(mut self, signature: ::models::EncodedHash) -> MicroBlockHeader {
    self.signature = signature;
    self
  }

  pub fn signature(&self) -> &::models::EncodedHash {
    &self.signature
  }


  pub fn set_time(&mut self, time: i64) {
    self.time = time;
  }

  pub fn with_time(mut self, time: i64) -> MicroBlockHeader {
    self.time = time;
    self
  }

  pub fn time(&self) -> &i64 {
    &self.time
  }


  pub fn set_version(&mut self, version: i64) {
    self.version = version;
  }

  pub fn with_version(mut self, version: i64) -> MicroBlockHeader {
    self.version = version;
    self
  }

  pub fn version(&self) -> &i64 {
    &self.version
  }


}



