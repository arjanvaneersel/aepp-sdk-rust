/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NameTransferTxJson {
  #[serde(rename = "name_id")]
  name_id: ::models::EncodedHash,
  #[serde(rename = "recipient_id")]
  recipient_id: ::models::EncodedHash,
  #[serde(rename = "fee")]
  fee: i64,
  #[serde(rename = "ttl")]
  ttl: Option<i64>,
  #[serde(rename = "account_id")]
  account_id: ::models::EncodedHash,
  #[serde(rename = "nonce")]
  nonce: Option<i64>,
  #[serde(rename = "version")]
  version: i64,
  #[serde(rename = "type")]
  _type: String
}

impl NameTransferTxJson {
  pub fn new(name_id: ::models::EncodedHash, recipient_id: ::models::EncodedHash, fee: i64, account_id: ::models::EncodedHash, version: i64, _type: String) -> NameTransferTxJson {
    NameTransferTxJson {
      name_id: name_id,
      recipient_id: recipient_id,
      fee: fee,
      ttl: None,
      account_id: account_id,
      nonce: None,
      version: version,
      _type: _type
    }
  }

  pub fn set_name_id(&mut self, name_id: ::models::EncodedHash) {
    self.name_id = name_id;
  }

  pub fn with_name_id(mut self, name_id: ::models::EncodedHash) -> NameTransferTxJson {
    self.name_id = name_id;
    self
  }

  pub fn name_id(&self) -> &::models::EncodedHash {
    &self.name_id
  }


  pub fn set_recipient_id(&mut self, recipient_id: ::models::EncodedHash) {
    self.recipient_id = recipient_id;
  }

  pub fn with_recipient_id(mut self, recipient_id: ::models::EncodedHash) -> NameTransferTxJson {
    self.recipient_id = recipient_id;
    self
  }

  pub fn recipient_id(&self) -> &::models::EncodedHash {
    &self.recipient_id
  }


  pub fn set_fee(&mut self, fee: i64) {
    self.fee = fee;
  }

  pub fn with_fee(mut self, fee: i64) -> NameTransferTxJson {
    self.fee = fee;
    self
  }

  pub fn fee(&self) -> &i64 {
    &self.fee
  }


  pub fn set_ttl(&mut self, ttl: i64) {
    self.ttl = Some(ttl);
  }

  pub fn with_ttl(mut self, ttl: i64) -> NameTransferTxJson {
    self.ttl = Some(ttl);
    self
  }

  pub fn ttl(&self) -> Option<&i64> {
    self.ttl.as_ref()
  }

  pub fn reset_ttl(&mut self) {
    self.ttl = None;
  }

  pub fn set_account_id(&mut self, account_id: ::models::EncodedHash) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: ::models::EncodedHash) -> NameTransferTxJson {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &::models::EncodedHash {
    &self.account_id
  }


  pub fn set_nonce(&mut self, nonce: i64) {
    self.nonce = Some(nonce);
  }

  pub fn with_nonce(mut self, nonce: i64) -> NameTransferTxJson {
    self.nonce = Some(nonce);
    self
  }

  pub fn nonce(&self) -> Option<&i64> {
    self.nonce.as_ref()
  }

  pub fn reset_nonce(&mut self) {
    self.nonce = None;
  }

  pub fn set_version(&mut self, version: i64) {
    self.version = version;
  }

  pub fn with_version(mut self, version: i64) -> NameTransferTxJson {
    self.version = version;
    self
  }

  pub fn version(&self) -> &i64 {
    &self.version
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> NameTransferTxJson {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



