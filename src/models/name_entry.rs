/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NameEntry {
  #[serde(rename = "id")]
  id: ::models::EncodedHash,
  #[serde(rename = "ttl")]
  ttl: i64,
  #[serde(rename = "pointers")]
  pointers: Vec<::models::NamePointer>
}

impl NameEntry {
  pub fn new(id: ::models::EncodedHash, ttl: i64, pointers: Vec<::models::NamePointer>) -> NameEntry {
    NameEntry {
      id: id,
      ttl: ttl,
      pointers: pointers
    }
  }

  pub fn set_id(&mut self, id: ::models::EncodedHash) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::EncodedHash) -> NameEntry {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::EncodedHash {
    &self.id
  }


  pub fn set_ttl(&mut self, ttl: i64) {
    self.ttl = ttl;
  }

  pub fn with_ttl(mut self, ttl: i64) -> NameEntry {
    self.ttl = ttl;
    self
  }

  pub fn ttl(&self) -> &i64 {
    &self.ttl
  }


  pub fn set_pointers(&mut self, pointers: Vec<::models::NamePointer>) {
    self.pointers = pointers;
  }

  pub fn with_pointers(mut self, pointers: Vec<::models::NamePointer>) -> NameEntry {
    self.pointers = pointers;
    self
  }

  pub fn pointers(&self) -> &Vec<::models::NamePointer> {
    &self.pointers
  }


}



