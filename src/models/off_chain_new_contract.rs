/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OffChainNewContract {
  #[serde(rename = "op")]
  op: String,
  /// Contract owner
  #[serde(rename = "owner")]
  owner: ::models::EncodedHash,
  /// VM version of the contract
  #[serde(rename = "vm_version")]
  vm_version: i64,
  #[serde(rename = "code")]
  code: ::models::ByteCode,
  /// Amount of tokens to deposit to the new contract
  #[serde(rename = "deposit")]
  deposit: i64,
  /// Contract call data
  #[serde(rename = "call_data")]
  call_data: ::models::EncodedByteArray
}

impl OffChainNewContract {
  pub fn new(op: String, owner: ::models::EncodedHash, vm_version: i64, code: ::models::ByteCode, deposit: i64, call_data: ::models::EncodedByteArray) -> OffChainNewContract {
    OffChainNewContract {
      op: op,
      owner: owner,
      vm_version: vm_version,
      code: code,
      deposit: deposit,
      call_data: call_data
    }
  }

  pub fn set_op(&mut self, op: String) {
    self.op = op;
  }

  pub fn with_op(mut self, op: String) -> OffChainNewContract {
    self.op = op;
    self
  }

  pub fn op(&self) -> &String {
    &self.op
  }


  pub fn set_owner(&mut self, owner: ::models::EncodedHash) {
    self.owner = owner;
  }

  pub fn with_owner(mut self, owner: ::models::EncodedHash) -> OffChainNewContract {
    self.owner = owner;
    self
  }

  pub fn owner(&self) -> &::models::EncodedHash {
    &self.owner
  }


  pub fn set_vm_version(&mut self, vm_version: i64) {
    self.vm_version = vm_version;
  }

  pub fn with_vm_version(mut self, vm_version: i64) -> OffChainNewContract {
    self.vm_version = vm_version;
    self
  }

  pub fn vm_version(&self) -> &i64 {
    &self.vm_version
  }


  pub fn set_code(&mut self, code: ::models::ByteCode) {
    self.code = code;
  }

  pub fn with_code(mut self, code: ::models::ByteCode) -> OffChainNewContract {
    self.code = code;
    self
  }

  pub fn code(&self) -> &::models::ByteCode {
    &self.code
  }


  pub fn set_deposit(&mut self, deposit: i64) {
    self.deposit = deposit;
  }

  pub fn with_deposit(mut self, deposit: i64) -> OffChainNewContract {
    self.deposit = deposit;
    self
  }

  pub fn deposit(&self) -> &i64 {
    &self.deposit
  }


  pub fn set_call_data(&mut self, call_data: ::models::EncodedByteArray) {
    self.call_data = call_data;
  }

  pub fn with_call_data(mut self, call_data: ::models::EncodedByteArray) -> OffChainNewContract {
    self.call_data = call_data;
    self
  }

  pub fn call_data(&self) -> &::models::EncodedByteArray {
    &self.call_data
  }


}



