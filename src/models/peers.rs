/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Peers {
  /// All discovered peers
  #[serde(rename = "peers")]
  peers: Vec<::models::Peer>,
  /// All blocked peers
  #[serde(rename = "blocked")]
  blocked: Vec<::models::Peer>
}

impl Peers {
  pub fn new(peers: Vec<::models::Peer>, blocked: Vec<::models::Peer>) -> Peers {
    Peers {
      peers: peers,
      blocked: blocked
    }
  }

  pub fn set_peers(&mut self, peers: Vec<::models::Peer>) {
    self.peers = peers;
  }

  pub fn with_peers(mut self, peers: Vec<::models::Peer>) -> Peers {
    self.peers = peers;
    self
  }

  pub fn peers(&self) -> &Vec<::models::Peer> {
    &self.peers
  }


  pub fn set_blocked(&mut self, blocked: Vec<::models::Peer>) {
    self.blocked = blocked;
  }

  pub fn with_blocked(mut self, blocked: Vec<::models::Peer>) -> Peers {
    self.blocked = blocked;
    self
  }

  pub fn blocked(&self) -> &Vec<::models::Peer> {
    &self.blocked
  }


}



