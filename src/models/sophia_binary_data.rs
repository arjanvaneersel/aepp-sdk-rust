/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SophiaBinaryData {
  #[serde(rename = "sophia-type")]
  sophia_type: String,
  #[serde(rename = "data")]
  data: String
}

impl SophiaBinaryData {
  pub fn new(sophia_type: String, data: String) -> SophiaBinaryData {
    SophiaBinaryData {
      sophia_type: sophia_type,
      data: data
    }
  }

  pub fn set_sophia_type(&mut self, sophia_type: String) {
    self.sophia_type = sophia_type;
  }

  pub fn with_sophia_type(mut self, sophia_type: String) -> SophiaBinaryData {
    self.sophia_type = sophia_type;
    self
  }

  pub fn sophia_type(&self) -> &String {
    &self.sophia_type
  }


  pub fn set_data(&mut self, data: String) {
    self.data = data;
  }

  pub fn with_data(mut self, data: String) -> SophiaBinaryData {
    self.data = data;
    self
  }

  pub fn data(&self) -> &String {
    &self.data
  }


}



