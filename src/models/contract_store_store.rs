/* 
 * Aeternity Epoch
 *
 * This is the [Aeternity](https://www.aeternity.com/) Epoch API.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: apiteam@aeternity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContractStoreStore {
  #[serde(rename = "key")]
  key: Option<String>,
  #[serde(rename = "value")]
  value: Option<::models::EncodedByteArray>
}

impl ContractStoreStore {
  pub fn new() -> ContractStoreStore {
    ContractStoreStore {
      key: None,
      value: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> ContractStoreStore {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_value(&mut self, value: ::models::EncodedByteArray) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: ::models::EncodedByteArray) -> ContractStoreStore {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&::models::EncodedByteArray> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



